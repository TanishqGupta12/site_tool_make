generator nextAdmin {
  provider = "next-admin-generator-prisma"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Domain {
  id               BigInt   @id @default(autoincrement())
  domain_name      String?  @db.VarChar(255)
  subdomain_name   String?  @db.VarChar(255)
  host             String?  @db.VarChar(255)
  description      String?  @db.Text
  logo_file_name   String?  @db.VarChar(255)
  logo_meta        String?  @db.VarChar(255)
  custom_font_name String?  @db.VarChar(255)

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  events           Event[]  @relation("DomainToEvents")  // One Domain has many Events

  @@map("domains")
}

model Event {
  id                                       BigInt    @id @default(autoincrement())
  name                                     String?   @db.VarChar(255)
  domainId                                 BigInt?
  description                              String?   @db.Text
  startDate                                DateTime?
  hasGallery                               Boolean?
  hasInfo                                  Boolean?
  hasAboutPage                             Boolean?
  hasContactPage                           Boolean?
  slug                                     String?   @db.VarChar(191)
  latitude                                 Decimal?  @db.Decimal(12, 6)
  longitude                                Decimal?  @db.Decimal(12, 6)
  endDate                                  DateTime?
  email                                    String?   @db.VarChar(255)
  phone                                    String?   @db.VarChar(255)
  logoMeta                                 String?   @db.VarChar(255)
  timeZone                                 String?   @db.VarChar(255) @default("Singapore")
  customCss                                String?   @db.Text
  customJs                                 String?   @db.Text
  termsAndConditions                       String?   @db.LongText
  protectedGallery                         Boolean?  @default(false)
  paymentNeeded                            Boolean?  @default(false)
  publishableKey                           String?   @db.VarChar(255) @default("pk_test_Hcw63Hd14F3WqABmHCZxfjqn")
  secretKey                                String?   @db.VarChar(255) @default("sk_test_1UhxGTUteWDoPbS1aCAHQTd4")
  templateVersion                          String?   @db.VarChar(255)
  eventAgendaDescription                   String?   @db.Text
  landingPageContent                       String?   @db.Text
  onlyLandingPage                          Boolean?  @default(false)
  hideRegistrationButton                   Boolean?  @default(false)
  sendRegistrationConfirmationEmailToGuest Boolean?  @default(false)
  footerText                               String?   @db.Text
  hideBlog                                 Boolean?  @default(false)
  hideForum                                Boolean?  @default(false)

  createdAt                                DateTime @default(now())
  updatedAt                                DateTime @updatedAt

  domain                                   Domain?   @relation("DomainToEvents", fields: [domainId], references: [id])  // Many Events belong to one Domain

  users                                    EventUser[] // Relationship to UserEvent

  @@map("events")
}

model Role {
  id        BigInt    @id @default(autoincrement())
  name      String    @db.VarChar(255)
  in_active Boolean   @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  users     User[]    @relation("RoleToUsers")  // One Role has many Users

  @@map("roles")
}


model User {
  id                     BigInt    @id @default(autoincrement())
  
  email                  String?   @db.VarChar(255)
  salutation             String?   @db.VarChar(255)
  first_name             String?   @db.Text
  last_name              String?   @db.Text
  position               String?   @db.Text
  organization           String?   @db.Text
  address                String?   @db.VarChar(255)
  city                   String?   @db.VarChar(255)
  mobile                 String?   @db.VarChar(255)
  online_status          String?   @default("offline") @db.VarChar(255)
  locale                 String?   @default("en") @db.VarChar(255)
  otp                    String?   @db.VarChar(255)
  avatar                 String?   @db.VarChar(255)
  authentication_token   String?   @db.VarChar(255)
  custom_fields          String?   @db.LongText
  encrypted_password     String?    @db.VarChar(255)
  reset_password_token   String?
  reset_password_sent_at DateTime?

  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  roleId                 BigInt?   // Foreign key reference to Role
  role                   Role?     @relation("RoleToUsers", fields: [roleId], references: [id])  


  events EventUser[]  // Relationship to UserEvent 

  @@map("users")
}


model EventUser {

  userId  BigInt  
  eventId BigInt  

  user  User?  @relation(fields: [userId], references: [id])
  event Event? @relation(fields: [eventId], references: [id])

  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, eventId])
  @@map("event_uses")   
}